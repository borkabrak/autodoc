DIDoc -- Documentation of the DITool project.
==============================================================================

TL;DR: 
    * Edit *.mkd files and run 'make' to deploy the website.


The documentation files are all those files that end with '.mkd'.  The format
is a mix of two technologies: Markdown and Template Toolkit.


HOW TO WRITE THE DOCUMENTATION:
==============================================================================

Just edit or create *.mkd files.

Familiarity with the Markdown and TTK formats will of course help, but Markdown
is pretty obvious, and TTK can be more or less ignored entirely if you don't
need it.  To get the idea, compare the version of this file in the doc
directory with what you see in a browser on the site.

MARKDOWN
==============================================================================

Markdown is a text-only format that's meant to be easy for humans to read and
write, and also easy for computers to convert into HTML.  It's based on
conventions from text-based email such as using stars for emphasis, the
character '>' for quoting, and other such things.  To put it another way,
Markdown is markup that *looks* like plain text.

More about Markdown:

    http://daringfireball.net/projects/markdown/syntax


TEMPLATE TOOLKIT:
==============================================================================

Template Toolkit (TTK) is a way to get variable data into the pages.  The
notation looks like:

    [% projectName %]      --> includes the value of projectName

The available data comes from two different places:

* Some are automatically generated via the `analyze` program
* The file 'bin/spec.json' can be edited to add any other data we need.

TTK also includes a pretty full-featured set of directives such as control
structures and file inclusion.  Read more at:

    http://www.template-toolkit.org/docs/manual/Syntax.html


HOW TO BUILD/PUBLISH THE DOCUMENTATION INTO A WEBSITE:
==============================================================================
Execute the Makefile.  For example, run this command:

    $ make


When you run the Makefile, this will happen:
------------------------------------------------------------------------------

* The code will be analyzed for what I'm calling 'spec' data, such as javascript
  objects or KAML (Ken's Application Markup Language) tags.

* The spec file will be read and its data added to that automatically generated.
    (NOTE:  The entire generated/combined spec will be saved to analysis.json)

* Every *.mkd file will have the spec data interpolated into it, and the contents then converted into HTML.

* The HTML will be assembled and deployed to the website.

* PROFIT!

------------------------------------------------------------------------------


CONFIGURING THE BUILD PROCESS:
==============================================================================
To change how the site is built, edit the Makefile.  For example, to change the
directory where the web server looks for the site to be, edit the value of the
WEBDIR variable.

Some things to know:
------------------------------------------------------------------------------

* The files in the documentation directory (.mkd) will never be changed
  automatically.  Beyond what is automatically generated, THE MARKDOWN FILES
  *ARE* THE DOCUMENTATION.

* Do not delete the Makefile.  And unless you know what you're doing, don't
  edit it. It describes to the computer the steps for building and publishing
  the website.  

* Everything else that's not documentation -- javascript, css, the scripts that
  build the site -- all live in the 'bin/' directory.  Do not delete the bin/
  directory.  Do not delete anything *in* the bin/ directory.  The documentation
  directory on the top level is for the documentation.
