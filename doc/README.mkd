DIDoc -- Documentation of the DITool project.
==============================================================================

The short version:

* Go to \\USHEN048W\Public\Didoc
* Edit/create .mkd files (changes are deployed periodically)


The documentation files are all those files that end with '.mkd'.  The format
is a mix of two technologies: Markdown and Template Toolkit.


HOW TO WRITE THE DOCUMENTATION:
==============================================================================

Just edit or create .mkd files.

Familiarity with the Markdown and TTK formats will of course help, but Markdown
is pretty obvious, and TTK can be more or less ignored entirely if you don't
need it.  To get the idea, compare the version of this file in the doc
directory with what you see in on the site.

MARKDOWN
==============================================================================

Markdown is a text-only format that's meant to be easy for humans to read and
write, and also easy for computers to convert into HTML.  It's based on things
people already do such as using stars for emphasis, the character '>' for
quoting, and other such things.  In short, Markdown is markup that *looks*
like regular ol' text.

[More about Markdown](http://daringfireball.net/projects/markdown/syntax)


[% TAGS [- -] %]
TEMPLATE TOOLKIT:
==============================================================================

Template Toolkit (TTK) is a way to get variable data into the pages.  The
notation looks like:

    [% projectName %]      --> includes the value of projectName

The available data comes from two different places:

* Some are automatically generated via the `analyze` program
* The file 'bin/spec.json' can be edited to add any other data we need.

TTK also includes a pretty full-featured set of directives such as control
structures and file inclusion.  

[More about Template Toolkit](http://www.template-toolkit.org/docs/manual/Syntax.html)


PUBLISHING
==============================================================================

The documentation is periodically built and published to the website.  (At the
time of this writing, this happens every ten minutes.)


When you run the Makefile, this will happen:
------------------------------------------------------------------------------

* The code will be analyzed for what I'm calling 'spec' data, such as javascript
  objects or KAML (Ken's Application Markup Language) tags.

* The spec file will be read and its data added to that automatically generated.
    (NOTE:  The entire generated/combined spec will be saved to analysis.json)

* Every .mkd file will have the spec data interpolated into it, and the
  contents then converted into HTML.

* The HTML will be assembled and deployed to the website.

* PROFIT!
